# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

type_int = 125
type_float = 12.76
type_none = None
type_str = "Good morning!"
type_tuple = (4, 122, 55.75)
type_list = ['a', 'b', 'c']
type_set = {233, None, "Text"}
type_dict = {'university': 'Geekbrains', 'lesson': 'Python'}

all_types_list = [type_int, type_float, type_none, type_str, type_tuple, type_list, type_set, type_dict]

for i in all_types_list:
    print(f'{i} is {type(i)}')

# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input()

my_list = input("Введите элементы списка: ").split()

for i in range(0, len(my_list)-1, 2):
    my_list[i], my_list[i+1] = my_list[i+1], my_list[i]

print(my_list)

# второй вариант решения:
# if len(my_list) % 2 == 0:
#     i = 0
#     while i < len(my_list):
#         el = my_list[i]
#         my_list[i] = my_list[i+1]
#         my_list[i+1] = el
#         i += 2
# else:
#     i = 0
#     while i < len(my_list) - 1:
#         el = my_list[i]
#         my_list[i] = my_list[i + 1]
#         my_list[i + 1] = el
#         i += 2
#
# print(my_list)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень). Напишите решения через list и через dict.

seasons_list = ['зима', 'весна', 'лето', 'осень']
seasons_dict = {1 : 'зима', 2 : 'весна', 3 : 'лето', 4 : 'осень'}
month = int(input("Введите месяц по номеру "))
if month ==12 or month == 1 or month == 2:
        print("dict:", seasons_dict.get(1))
        print("list:", seasons_list[0])
elif month == 3 or month == 4 or month ==5:
    print("dict:", seasons_dict.get(2))
    print("list:", seasons_list[1])
elif month == 6 or month == 7 or month == 8:
    print("dict:", seasons_dict.get(3))
    print("list:", seasons_list[2])

elif month == 9 or month == 10 or month == 11:
    print("dict:", seasons_dict.get(4))
    print("list:", seasons_list[3])
else:
        print("Некорректный номер месяца")

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

my_string = input("введите строку: ")
my_word = []
number = 1
for element in range(my_string.count(' ') + 1):
    my_word = my_string.split()
    if len(str(my_word)) <= 10:
        print(f" {number} {my_word [element]}")
        number += 1
    else:
        print(f" {number} {my_word [element] [0:10]}")
        number += 1

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.

number = int(input("Enter new element of rating: "))
rating = [7, 5, 3, 3, 2]
c = rating.count(number)
for element in rating:
    if c > 0:
        i = rating.index(number)
        rating.insert(i+c, number)
        break
    else:
        if number > element:
            j = rating.index(element)
            rating.insert(j, number)
            break
        elif number < rating[len(rating) - 1]:
            rating.append(number)
print(rating)
