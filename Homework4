# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

def simple_calc():
    x = float(input('Введите количество отработанных часов : '))
    y = float(input('Введите часовую ставку, : '))
    c = float(input('Введите размер премии - '))
    pay = x * y
    return pay + c
print(f'Размер заработной платы составил: {simple_calc() }')

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.

result_list = []
list = [int(i) for i in input("Введите список чисел: ").split()]
for i in range(1, len(list)):
    if list[i] > list[i-1]:
        (result_list.append(list[i]))
print("Исходный список: ", list)
print("Элементы исходного списка, которые больше предыдущего: ", result_list)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.

list = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
print("Список чисел кратных 20 или 21 в диапазоне [20..240): ", list)

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.

my_list = [10, 12, 124, 11, 11, 45, 10, 14, 12]
print("Исходные элементы списка:\n", my_list)
new_list = [i for i in my_list if my_list.count(i) == 1]
print("Элементы списка, не имеющие повторений:\n", new_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.

from functools import reduce

list = [i for i in range(100, 1001, 2)]
print("Список чётных чисел в диапазоне [100..1000]:\n", list)
print("Результат вычисления произведения всех элементов списка:\n", reduce(lambda x, y: x * y, list))

# 6. Реализовать два небольших скрипта: а) итератор, генерирующий целые числа, начиная с указанного б) итератор, повторяющий элементы некоторого списка, определенного заранее.

# а)
from itertools import count

print("<<Бесконечный итератор целых чисел, начиная с указанного>>")
n = int(input("Введите целое число:"))

for i in count(n):
    if i >=50:
        break
    else:
        print(i)
# б)
from itertools import cycle

list = [2, 6, 2, 1, 17, 49]
for i in cycle(list):
    if i >= 150:
        break
    else:
        print(i)

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.

def gen_factorial(n):
    if n == 1:
        yield 1
    else:
        for u in gen_factorial(n - 1):
            yield u
        yield u * n

for u in gen_factorial(4):
    print(u)

print(list(gen_factorial(4)))
